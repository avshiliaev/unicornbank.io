// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/queries/queries.proto

package go_micro_service_queries

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Queries service

func NewQueriesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Queries service

type QueriesService interface {
	AccountsOverviewStream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Queries_AccountsOverviewStreamService, error)
	AccountDetailStream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Queries_AccountDetailStreamService, error)
}

type queriesService struct {
	c    client.Client
	name string
}

func NewQueriesService(name string, c client.Client) QueriesService {
	return &queriesService{
		c:    c,
		name: name,
	}
}

func (c *queriesService) AccountsOverviewStream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Queries_AccountsOverviewStreamService, error) {
	req := c.c.NewRequest(c.name, "Queries.AccountsOverviewStream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &queriesServiceAccountsOverviewStream{stream}, nil
}

type Queries_AccountsOverviewStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type queriesServiceAccountsOverviewStream struct {
	stream client.Stream
}

func (x *queriesServiceAccountsOverviewStream) Close() error {
	return x.stream.Close()
}

func (x *queriesServiceAccountsOverviewStream) Context() context.Context {
	return x.stream.Context()
}

func (x *queriesServiceAccountsOverviewStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *queriesServiceAccountsOverviewStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *queriesServiceAccountsOverviewStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queriesService) AccountDetailStream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Queries_AccountDetailStreamService, error) {
	req := c.c.NewRequest(c.name, "Queries.AccountDetailStream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &queriesServiceAccountDetailStream{stream}, nil
}

type Queries_AccountDetailStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type queriesServiceAccountDetailStream struct {
	stream client.Stream
}

func (x *queriesServiceAccountDetailStream) Close() error {
	return x.stream.Close()
}

func (x *queriesServiceAccountDetailStream) Context() context.Context {
	return x.stream.Context()
}

func (x *queriesServiceAccountDetailStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *queriesServiceAccountDetailStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *queriesServiceAccountDetailStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Queries service

type QueriesHandler interface {
	AccountsOverviewStream(context.Context, *StreamingRequest, Queries_AccountsOverviewStreamStream) error
	AccountDetailStream(context.Context, *StreamingRequest, Queries_AccountDetailStreamStream) error
}

func RegisterQueriesHandler(s server.Server, hdlr QueriesHandler, opts ...server.HandlerOption) error {
	type queries interface {
		AccountsOverviewStream(ctx context.Context, stream server.Stream) error
		AccountDetailStream(ctx context.Context, stream server.Stream) error
	}
	type Queries struct {
		queries
	}
	h := &queriesHandler{hdlr}
	return s.Handle(s.NewHandler(&Queries{h}, opts...))
}

type queriesHandler struct {
	QueriesHandler
}

func (h *queriesHandler) AccountsOverviewStream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.QueriesHandler.AccountsOverviewStream(ctx, m, &queriesAccountsOverviewStreamStream{stream})
}

type Queries_AccountsOverviewStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type queriesAccountsOverviewStreamStream struct {
	stream server.Stream
}

func (x *queriesAccountsOverviewStreamStream) Close() error {
	return x.stream.Close()
}

func (x *queriesAccountsOverviewStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *queriesAccountsOverviewStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *queriesAccountsOverviewStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *queriesAccountsOverviewStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *queriesHandler) AccountDetailStream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.QueriesHandler.AccountDetailStream(ctx, m, &queriesAccountDetailStreamStream{stream})
}

type Queries_AccountDetailStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type queriesAccountDetailStreamStream struct {
	stream server.Stream
}

func (x *queriesAccountDetailStreamStream) Close() error {
	return x.stream.Close()
}

func (x *queriesAccountDetailStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *queriesAccountDetailStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *queriesAccountDetailStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *queriesAccountDetailStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}
