// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/profiles/profiles.proto

package go_micro_service_profiles

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Profiles service

func NewProfilesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Profiles service

type ProfilesService interface {
	AccountsOverview(ctx context.Context, in *AccountsStreamRequest, opts ...client.CallOption) (Profiles_AccountsOverviewService, error)
	AccountDetail(ctx context.Context, in *AccountsStreamRequest, opts ...client.CallOption) (Profiles_AccountDetailService, error)
}

type profilesService struct {
	c    client.Client
	name string
}

func NewProfilesService(name string, c client.Client) ProfilesService {
	return &profilesService{
		c:    c,
		name: name,
	}
}

func (c *profilesService) AccountsOverview(ctx context.Context, in *AccountsStreamRequest, opts ...client.CallOption) (Profiles_AccountsOverviewService, error) {
	req := c.c.NewRequest(c.name, "Profiles.AccountsOverview", &AccountsStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &profilesServiceAccountsOverview{stream}, nil
}

type Profiles_AccountsOverviewService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*AccountsStreamResponse, error)
}

type profilesServiceAccountsOverview struct {
	stream client.Stream
}

func (x *profilesServiceAccountsOverview) Close() error {
	return x.stream.Close()
}

func (x *profilesServiceAccountsOverview) Context() context.Context {
	return x.stream.Context()
}

func (x *profilesServiceAccountsOverview) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *profilesServiceAccountsOverview) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *profilesServiceAccountsOverview) Recv() (*AccountsStreamResponse, error) {
	m := new(AccountsStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profilesService) AccountDetail(ctx context.Context, in *AccountsStreamRequest, opts ...client.CallOption) (Profiles_AccountDetailService, error) {
	req := c.c.NewRequest(c.name, "Profiles.AccountDetail", &AccountsStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &profilesServiceAccountDetail{stream}, nil
}

type Profiles_AccountDetailService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*AccountsStreamResponse, error)
}

type profilesServiceAccountDetail struct {
	stream client.Stream
}

func (x *profilesServiceAccountDetail) Close() error {
	return x.stream.Close()
}

func (x *profilesServiceAccountDetail) Context() context.Context {
	return x.stream.Context()
}

func (x *profilesServiceAccountDetail) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *profilesServiceAccountDetail) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *profilesServiceAccountDetail) Recv() (*AccountsStreamResponse, error) {
	m := new(AccountsStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Profiles service

type ProfilesHandler interface {
	AccountsOverview(context.Context, *AccountsStreamRequest, Profiles_AccountsOverviewStream) error
	AccountDetail(context.Context, *AccountsStreamRequest, Profiles_AccountDetailStream) error
}

func RegisterProfilesHandler(s server.Server, hdlr ProfilesHandler, opts ...server.HandlerOption) error {
	type profiles interface {
		AccountsOverview(ctx context.Context, stream server.Stream) error
		AccountDetail(ctx context.Context, stream server.Stream) error
	}
	type Profiles struct {
		profiles
	}
	h := &profilesHandler{hdlr}
	return s.Handle(s.NewHandler(&Profiles{h}, opts...))
}

type profilesHandler struct {
	ProfilesHandler
}

func (h *profilesHandler) AccountsOverview(ctx context.Context, stream server.Stream) error {
	m := new(AccountsStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ProfilesHandler.AccountsOverview(ctx, m, &profilesAccountsOverviewStream{stream})
}

type Profiles_AccountsOverviewStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*AccountsStreamResponse) error
}

type profilesAccountsOverviewStream struct {
	stream server.Stream
}

func (x *profilesAccountsOverviewStream) Close() error {
	return x.stream.Close()
}

func (x *profilesAccountsOverviewStream) Context() context.Context {
	return x.stream.Context()
}

func (x *profilesAccountsOverviewStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *profilesAccountsOverviewStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *profilesAccountsOverviewStream) Send(m *AccountsStreamResponse) error {
	return x.stream.Send(m)
}

func (h *profilesHandler) AccountDetail(ctx context.Context, stream server.Stream) error {
	m := new(AccountsStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ProfilesHandler.AccountDetail(ctx, m, &profilesAccountDetailStream{stream})
}

type Profiles_AccountDetailStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*AccountsStreamResponse) error
}

type profilesAccountDetailStream struct {
	stream server.Stream
}

func (x *profilesAccountDetailStream) Close() error {
	return x.stream.Close()
}

func (x *profilesAccountDetailStream) Context() context.Context {
	return x.stream.Context()
}

func (x *profilesAccountDetailStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *profilesAccountDetailStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *profilesAccountDetailStream) Send(m *AccountsStreamResponse) error {
	return x.stream.Send(m)
}
