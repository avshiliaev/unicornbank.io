// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/notifications/notifications.proto

package go_micro_service_notifications

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Notifications service

func NewNotificationsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Notifications service

type NotificationsService interface {
	Overview(ctx context.Context, in *NotificationsStreamRequest, opts ...client.CallOption) (Notifications_OverviewService, error)
}

type notificationsService struct {
	c    client.Client
	name string
}

func NewNotificationsService(name string, c client.Client) NotificationsService {
	return &notificationsService{
		c:    c,
		name: name,
	}
}

func (c *notificationsService) Overview(ctx context.Context, in *NotificationsStreamRequest, opts ...client.CallOption) (Notifications_OverviewService, error) {
	req := c.c.NewRequest(c.name, "Notifications.Overview", &NotificationsStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &notificationsServiceOverview{stream}, nil
}

type Notifications_OverviewService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*NotificationsStreamResponse, error)
}

type notificationsServiceOverview struct {
	stream client.Stream
}

func (x *notificationsServiceOverview) Close() error {
	return x.stream.Close()
}

func (x *notificationsServiceOverview) Context() context.Context {
	return x.stream.Context()
}

func (x *notificationsServiceOverview) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationsServiceOverview) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationsServiceOverview) Recv() (*NotificationsStreamResponse, error) {
	m := new(NotificationsStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Notifications service

type NotificationsHandler interface {
	Overview(context.Context, *NotificationsStreamRequest, Notifications_OverviewStream) error
}

func RegisterNotificationsHandler(s server.Server, hdlr NotificationsHandler, opts ...server.HandlerOption) error {
	type notifications interface {
		Overview(ctx context.Context, stream server.Stream) error
	}
	type Notifications struct {
		notifications
	}
	h := &notificationsHandler{hdlr}
	return s.Handle(s.NewHandler(&Notifications{h}, opts...))
}

type notificationsHandler struct {
	NotificationsHandler
}

func (h *notificationsHandler) Overview(ctx context.Context, stream server.Stream) error {
	m := new(NotificationsStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NotificationsHandler.Overview(ctx, m, &notificationsOverviewStream{stream})
}

type Notifications_OverviewStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*NotificationsStreamResponse) error
}

type notificationsOverviewStream struct {
	stream server.Stream
}

func (x *notificationsOverviewStream) Close() error {
	return x.stream.Close()
}

func (x *notificationsOverviewStream) Context() context.Context {
	return x.stream.Context()
}

func (x *notificationsOverviewStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationsOverviewStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationsOverviewStream) Send(m *NotificationsStreamResponse) error {
	return x.stream.Send(m)
}
